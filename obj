import wollok.game.*

class Personajes{
    var property vida = 100
    var property dano = 50
    
    method ataque(entidad){
        return entidad.vida(entidad.vida() - dano)
    }
    
}

class Heroe inherits Personajes{
    var property estamina= 50
    var property esta_protegido = false
    var property position = game.center()
    const property tipo = "heroe"
    
    
    method image() = "image.jpg"
    
    method aumentar_estamina(){
    	if (estamina <= 91){estamina += 10}
    }
    
    method comprobar_estamina(){
        return estamina < 10  
    }
    
    method proteger(){
        esta_protegido = esta_protegido.negate()
    }
    
    method ataque_especial(enemigo){
        self.comprobar_estamina()
        estamina -= 10
        return enemigo.vida((enemigo.vida()-(dano * 1.5)))
    }
    
    
}

class Enemigo inherits Personajes{
    
    var x = 5.randomUpTo(20).truncate(0)
    var y = 5.randomUpTo(12).truncate(0)
    var property position = game.at(x,y)
    const property tipo = "enemigo"
    var destino_x = 0
    var destino_y = 0
    
    method image() = "images.jpg"
    
    override method ataque(entidad){
        if (entidad.esta_protegido()){
            return entidad.estamina(entidad.estamina()-10)
        }
        return entidad.vida(entidad.vida() - dano)
    }
    
    
    
    method seguir(heroe){
    	var posicion_heroe = heroe.position()
    	destino_x = position.x() + if(posicion_heroe.x() > position.x()) 2 else -2
    	destino_y = position.y() + if(posicion_heroe.y() > position.y()) 2 else -2
    	
    	self.mover(destino_x,destino_y)
    }
    
    
   method evitar(){
   	var personajes = game.allVisuals()
   	personajes.forEach{elemento => 
   		if(game.colliders(self).contains(elemento) and elemento.tipo() == "enemigo"){
   			destino_x = position.x() - 1
   			destino_y = position.y() - 1
   			self.mover(destino_x, destino_y)
   		}
   		
   	}
   }
    
    method mover(destinox,destinoy){
    	position = game.at(destinox,destinoy)
    }
}

class Enemigos_ld inherits Enemigo{
    
     
    
    override method image() = "enemigo.png"
    
    override method ataque(enemigo){
        return enemigo.vida(enemigo.vida() - dano)
    }
    
    
}

class Jefes inherits Personajes{
    
    
    
}


class Oleadas {
	var property cant_enemigos =[]
	var aleatoria = 5.randomUpTo(10).truncate(0)
	var multiplicador = 1
	var division = 2.25
	var nivel = 1
	
	method comprobar_nivel(){
		if(nivel<=4){
			multiplicador = 1
			return "Principiante"
		}
		
		if(5<nivel and nivel<=9){
			multiplicador = 1.25
			return "intermedio"
		}
		
		if(10<nivel and nivel<=15){
			multiplicador = 1.5
			return "avanzado"
		}
		return " "
	}
	
	method comprobar_enemigos(){
		return cant_enemigos.isEmpty()
	}
	
	method avanzar_oleadas(){
		if(self.comprobar_enemigos()){
			nivel += 1
		}
	}
	
	method crear_enemigos(){
		(1 .. aleatoria).forEach{n => cant_enemigos.add(new Enemigo(vida = 75*multiplicador, dano = 30*multiplicador))}
	}
	
	method crear_jefes(){
		
	}
}
